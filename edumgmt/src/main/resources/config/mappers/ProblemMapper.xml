<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.shinc.orm.mybatis.mappers.edu.ProblemMapper">
	<resultMap id="BaseResultMap" type="Problem">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="sh_book_id" property="bookId" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="two_code" property="twoCode" jdbcType="VARCHAR" />
		<result column="videoNum" property="videoNum" jdbcType="VARCHAR" />
	</resultMap>
	<select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		id, sh_book_id, status, content,two_code
		from sh_problem
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="findAll" parameterType="Problem" resultMap="BaseResultMap">
		SELECT 
		    t1.id,
		    t1.sh_book_id,
		    t1.status,
		    t1.content,
		    t1.two_code,
		    COUNT(t2.id) videoNum
		FROM
		    sh_problem t1
		        LEFT JOIN
		    sh_problem_has_sh_video_base t2 ON t1.id = t2.sh_problem_id
		WHERE 1 = 1 
		<!-- 加入查询条件 -->
		GROUP BY t1.id
		
		
	</select>
	<select id="getProblemVideoBaseList" parameterType="ProblemHasVideoBase" resultType="java.util.HashMap">
		SELECT 
				problem.id problemId,
				past.id videoPastpaperId,
				base.question_id,
				base.id,
			    base.title,
			    base.desc,
			    base.difficulty,
			    base.status,
			    base.question_number,
			    base.profile,
			    base.updatetime,
			    base.qrcode,
			    bank.id bankid,
			    bank.name bankname,
			    course.id courseId,
			    course.name courseName,
			    bt.id btid,
			    bt.name btname,
			    year.id yearid,
			    year.year year,
			    qtype.id typeId,
			    qtype.name typeName,
			    lecture.id lectureId,
			    lecture.name lectureName,
			    lecture.level lectureLevel,
			    group_concat(distinct sk.name) keyword,
			    cast(group_concat(distinct sk.id) AS CHAR)  keywordId,
			    group_concat(distinct kp.name) knowledge,
			    cast(group_concat(distinct kp.id) AS CHAR)  knowledgeId,
			    case when group_concat(distinct vidoDetail.url) is null then '未上传'
				when group_concat(distinct vidoDetail.url) is not null THEN '已上传'
				end AS videoUrl
			    
			   
			    
			FROM
				sh_problem_has_sh_video_base problem left join
			    sh_video_base base on problem.sh_video_base_id = base.id
			         INNER JOIN
			     sh_video_pastpaper past ON past.sh_video_base_id = base.id
			        LEFT JOIN
			    sh_questionbank bank ON bank.id = past.sh_questionbank_id
			        LEFT JOIN
			    sh_course course ON course.id = base.sh_course_id
			        LEFT JOIN
			    sh_questionbank_type bt ON bt.id = past.sh_questionbank_type_id
			        LEFT JOIN
			    sh_questionbank_year year ON year.id = past.sh_questionbank_year_id
			        LEFT JOIN
			    sh_question_type qtype ON qtype.id = past.sh_question_type_id
			        LEFT JOIN
			    sh_lecture lecture ON lecture.id = base.sh_lecture_id
			    left join sh_video_base_keyword kw on kw.sh_video_base_id = base.id
			    left join sh_keyword sk on sk.id = kw.sh_keyword_id
			    
			    left join sh_video_base_knowledge_point pt on pt.sh_video_base_id = base.id
			    left join sh_knowledge_point kp on kp.id = pt.sh_knowledge_point_id
			    left join sh_video_detail vidoDetail on vidoDetail.sh_video_base_id=base.id
			    
			WHERE 1=1  
				<if test="problemId != null">
					and problem.id = #{problemId}
				</if>
			    group by id
			    having 1=1
			    <if test="hasVideo == 1">
					and videoUrl = '已上传'
				</if>
				<if test="hasVideo == 0">
					and videoUrl = '未上传'
				</if>  
			    
			    order by base.updatetime desc
		
		<!-- 加入查询条件 -->
	</select>
	<delete id="deleteById" parameterType="java.lang.Integer">
		delete from sh_problem
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="Problem">
		insert into sh_problem
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="bookId != null">
				sh_book_id,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="content != null">
				content,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="bookId != null">
				#{bookId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				#{content,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="update" parameterType="Problem">
		update sh_problem
		<set>
			<if test="bookId != null">
				sh_book_id = #{bookId,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				content = #{content,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>