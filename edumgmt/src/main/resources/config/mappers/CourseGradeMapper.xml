<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.shinc.orm.mybatis.mappers.edu.CourseGradeMapper">
	<resultMap id="BaseResultMap" type="CourseGrade">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="sh_course_id" property="courseId" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="VARCHAR" />
		<result column="sh_material_version_id" property="materialVersionId" jdbcType="INTEGER" />
		<result column="materialVersionName" property="materialVersionName" jdbcType="VARCHAR" />
		
	</resultMap>
	<select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		id, sh_course_id, name, type, sh_material_version_id
		from sh_course_grade
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="findAll" parameterType="CourseGrade" resultMap="BaseResultMap">
		SELECT 
		    t1.id,
		    t1.sh_course_id,
		    t1.name,
		    t1.type,
		    t1.sh_material_version_id,
		    t2.name materialVersionName
		FROM
		    sh_course_grade t1,
		    sh_material_version t2
		WHERE
		    t1.sh_material_version_id = t2.id
		
		<if test="courseId != null">
			and sh_course_id = #{courseId}
		</if> 
		<!-- 加入查询条件 -->
	</select>
	
	<select id="selectCourseGradeList" parameterType="CourseGrade" resultType="map">
		SELECT 
		    a.id,
		    a.name,
		    a.type,
		    b.name course,
		    c.name version,
		    COUNT(*) count
		FROM
		    sh_course_grade a
		        LEFT JOIN
		    sh_course b ON a.sh_course_id = b.id
		        LEFT JOIN
		    sh_material_version c ON a.sh_material_version_id = c.id
		        LEFT JOIN
		    sh_course_grade_has_sh_video_base d ON d.sh_course_grade_id = a.id
		WHERE 1=1
		<if test="courseId != null">
			and a.sh_course_id = #{courseId}
		</if> 
		GROUP BY a.id
		
		
		<!-- 加入查询条件 -->
	</select>
	
	<select id="getCourseGradeVideoBaseList" parameterType="CourseGradeHasVideoBase" resultType="java.util.HashMap">
		SELECT 
		    courseGrade.sh_course_grade_id courseGradeId,
		    courseGrade.id courseGradeHasVideoBaseId,
		    courseGrade.sort,
		    base.question_id,
		    base.id,
		    base.title,
		    base.desc,
		    base.difficulty,
		    base.status,
		    base.question_number,
		    base.profile,
		    base.updatetime,
		    base.qrcode,
		    course.id courseId,
		    course.name courseName,
		    lecture.id lectureId,
		    lecture.name lectureName,
		    lecture.level lectureLevel,
		    GROUP_CONCAT(DISTINCT sk.name) keyword,
		    CAST(GROUP_CONCAT(DISTINCT sk.id) AS CHAR) keywordId,
		    GROUP_CONCAT(DISTINCT kp.name) knowledge,
		    CAST(GROUP_CONCAT(DISTINCT kp.id) AS CHAR) knowledgeId,
		    CASE
		        WHEN GROUP_CONCAT(DISTINCT vidoDetail.url) IS NULL THEN '未上传'
		        WHEN GROUP_CONCAT(DISTINCT vidoDetail.url) IS NOT NULL THEN '已上传'
		    END AS videoUrl
		FROM
		    sh_course_grade_has_sh_video_base courseGrade
		        LEFT JOIN
		    sh_video_base base ON courseGrade.sh_video_base_id = base.id
		        LEFT JOIN
		    sh_course course ON course.id = base.sh_course_id
		        LEFT JOIN
		    sh_lecture lecture ON lecture.id = base.sh_lecture_id
		        LEFT JOIN
		    sh_video_base_keyword kw ON kw.sh_video_base_id = base.id
		        LEFT JOIN
		    sh_keyword sk ON sk.id = kw.sh_keyword_id
		        LEFT JOIN
		    sh_video_base_knowledge_point pt ON pt.sh_video_base_id = base.id
		        LEFT JOIN
		    sh_knowledge_point kp ON kp.id = pt.sh_knowledge_point_id
		        LEFT JOIN
		    sh_video_detail vidoDetail ON vidoDetail.sh_video_base_id = base.id
			    
			WHERE 1=1  
				<if test="courseGradeId != null">
					and courseGrade.sh_course_grade_id = #{courseGradeId}
				</if>
			    group by courseGrade.id
			    having 1=1
			    <if test="hasVideo == 1">
					and videoUrl = '已上传'
				</if>
				<if test="hasVideo == 0">
					and videoUrl = '未上传'
				</if>  
			    
			    order by base.updatetime desc
		
		<!-- 加入查询条件 -->
	</select>
	
	<delete id="deleteById" parameterType="java.lang.Integer">
		delete from sh_course_grade
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="CourseGrade">
		insert into sh_course_grade
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="courseId != null">
				sh_course_id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="materialVersionId != null">
				sh_material_version_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="courseId != null">
				#{courseId,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=VARCHAR},
			</if>
			<if test="materialVersionId != null">
				#{materialVersionId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="update" parameterType="CourseGrade">
		update sh_course_grade
		<set>
			<if test="courseId != null">
				sh_course_id = #{courseId,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=VARCHAR},
			</if>
			<if test="materialVersionId != null">
				sh_material_version_id = #{materialVersionId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>